# ======================== Elasticsearch Configuration =========================
#
# NOTE: Elasticsearch comes with reasonable defaults for most settings.
#       Before you set out to tweak and tune the configuration, make sure you
#       understand what are you trying to accomplish and the consequences.
#
# The primary way of configuring a node is via this file. This template lists
# the most important settings you may want to configure for a production cluster.
#
# Please see the documentation for further information on configuration options:
# <https://www.elastic.co/guide/en/elasticsearch/reference/6.3/setup.html>
#
# Any element in the configuration can be replaced with environment variables
# by placing them in ${...} notation. For example:
# --  node.rack: ${RACK_ENV_VAR}
# ---------------------------------- Cluster -----------------------------------

# Cluster name identifies the cluster for auto-discovery. If you're running
# multiple clusters on the same network, make sure you're using unique names.
#
cluster.name: ${CLUSTER_NAME}

# ------------------------------------ Node ------------------------------------

# Node names are generated dynamically on startup, so you're relieved
# from configuring them manually. You can tie this node to a specific name:
#
node.name: ${NODE_NAME}

# By default, all nodes are eligible to become masters and store

# Setting this to ture allows this node to be eligible as a master node (enabled by default)
#
node.master: ${IS_MASTER_NODE}

# Setting this true, allow this node to store data (enabled by default)
#
node.data: ${IS_DATA_NODE}

# Settin this true allows this node to handle ingest tasks (enabled by default)
#
node.ingest: ${IS_INGEST_NODE}

# You can exploit these settings to design advanced cluster topologies.
#
# 1. You want this node to never become a master node, only to hold data.
#    This will be the "workhorse" of your cluster.
#
# node.master: false
# node.data: true
# node.ingest: true
#
# 2. You want this node to only serve as a master: to not store any data and
#    to have free resources. This will be the "coordinator" of your cluster.
#
# node.master: true
# node.data: false
# node.ingest: false
#
# 3. You want this node to be neither master nor data node, but
#    to act as a "search load balancer" (fetching data from nodes,
#    aggregating results, etc.)
#
# node.master: false
# node.data: false
# node.ingest: false

# Use the Cluster Health API [http://localhost:9200/_cluster/health], the
# Node Info API [http://localhost:9200/_cluster/nodes] or GUI tools
# such as <http://github.com/lukas-vlcek/bigdesk> and
# <http://mobz.github.com/elasticsearch-head> to inspect the cluster state.

# A node can have generic attributes associated with it, which can later be used
# for customized shard allocation filtering, or allocation awareness. An attribute
# is a simple key value pair, similar to node.key: value, here is an example:
#
# node.rack: rack314

# By default, multiple nodes are allowed to start from the same installation location
# to disable it, set the following:
# node.max_local_storage_nodes: 1

# minimum_master_nodes need to be explicitly set when bound on a public IP
# set to 1 to allow single node clusters
# Details: https://github.com/elastic/elasticsearch/pull/17288

# ----------------------------------- Paths ------------------------------------

# Path to directory where to store index data allocated for this node
# (separate multiple locations by comma):
#
# path.data: /var/lib/elasticsearch/data
# Or path in a docker image:
# path.datd: /usr/share/elasticsearch/data

# Path to log files:
#
# path.logs: /var/log/elasticsearch
#
# However, in our current setup, log messages go to the console and are handled
# by the configured Docker logging driver which are then collected by filebeat and
# sent to logstash. By default you can access logs with docker logs.

# ----------------------------------- Memory -----------------------------------

# It's worth mentining that Elasticsearch performs poorly when the system is swapping the memory.
# To prevent swapping, lock the memory on startup:
#
bootstrap.mlockall: true

# The vm.max_map_count kernel setting needs to be set to at least 262144 for production use.
# sysctl -w vm.max_map_count=262144

# Make sure that the `ES_HEAP_SIZE` environment variable is set to about half the memory
# available on the system and that the owner of the process is allowed to use this limit.
# For more info see (https://www.elastic.co/guide/en/elasticsearch/reference/current/jvm-options.html)
# and this (https://www.elastic.co/guide/en/elasticsearch/reference/current/heap-size.html).
#
# Also, make sure that the ES_MIN_MEM and ES_MAX_MEM environment variables are set
# to the same value, and that the machine has enough memory to allocate
# for ElasticSearch, leaving enough memory for the operating system itself.
#
# You should also make sure that the ElasticSearch process is allowed to lock
# the memory, eg. by using `ulimit -l unlimited` (this has been configured in the docker
# compose file).

# ----------------------------------- Plugin -----------------------------------

# If a plugin listed here is not installed for current node, the node will not start.
#
# plugin.mandatory: mapper-attachments,lang-groovy

# ---------------------------------- Network -----------------------------------

# ElasticSearch, by default, binds itself to the 0.0.0.0 address, and listens
# on port [9200-9300] for HTTP traffic and on port [9300-9400] for node-to-node
# communication. (the range means that if the port is busy, it will automatically
# try the next port).

# Set the bind address to a specific IP (IPv4 or IPv6):
network.host: 0.0.0.0

# Set a custom port for HTTP:
#
# http.port: 9200
#
# For more information, see the documentation at:
# <http://www.elastic.co/guide/en/elasticsearch/reference/current/modules-network.html>
#
# ---------------------------------- Gateway -----------------------------------
#
# Block initial recovery after a full cluster restart until N nodes are started:
#
# gateway.recover_after_nodes: 3
#
# For more information, see the documentation at:
# <http://www.elastic.co/guide/en/elasticsearch/reference/current/modules-gateway.html>
#
# --------------------------------- Discovery ----------------------------------
#
# Discovery infrastructure ensures nodes can be found within a cluster
# and master node is elected. Multicast discovery is the default.

# Elasticsearch nodes will find each other via unicast, by default.
# For more information, see the documentation at:
# <http://www.elastic.co/guide/en/elasticsearch/reference/current/modules-discovery.html>

# Set to ensure a node sees N other master eligible nodes to be considered
# operational within the cluster. Its recommended to set it to a higher value
# than 1 when running more than 2 nodes in the cluster.
# Prevent the "split brain" by configuring the majority of nodes ( master_eligible_nodes / 2 + 1):
#
# discovery.zen.minimum_master_nodes: 3

# We'll bootstrap cluster communications by getting a master node via
# the ContainerPilot `preStart` directive, which will rewrite this
# configuration value with the appropriate hostname.

# discovery.zen.ping.multicast.enabled: false
# discovery.zen.ping.unicast.hosts: ["${ES_BOOTSTRAP_HOST}"]

# Set the time to wait for ping responses from other nodes when discovering.
# Set this option to a higher value on a slow or congested network
# to minimize discovery failures:
#
# discovery.zen.ping.timeout: 3s

# ---------------------------------- Index ------------------------------------

# You can set a number of options (such as shard/replica options, mapping
# or analyzer definitions, translog settings, ...) for indices globally,
# in this file.
#
# Note, that it makes more sense to configure index settings specifically for
# a certain index, either when creating it or by using the index templates API.
#
# See <http://elasticsearch.org/guide/en/elasticsearch/reference/current/index-modules.html> and
# <http://elasticsearch.org/guide/en/elasticsearch/reference/current/indices-create-index.html>
# for more information.

# Set the number of shards (splits) of an index (5 by default):
#
# index.number_of_shards: 2

# Set the number of replicas (additional copies) of an index (1 by default):
#
# index.number_of_replicas: 1

# These settings directly affect the performance of index and search operations
# in your cluster. Assuming you have enough machines to hold shards and
# replicas, the rule of thumb is:
#
# 1. Having more *shards* enhances the _indexing_ performance and allows to
#    _distribute_ a big index across machines.
# 2. Having more *replicas* enhances the _search_ performance and improves the
#    cluster _availability_.
#
# The "number_of_shards" is a one-time setting for an index.
#
# The "number_of_replicas" can be increased or decreased anytime,
# by using the Index Update Settings API.
#
# ElasticSearch takes care about load balancing, relocating, gathering the
# results from nodes, etc. Experiment with different settings to fine-tune
# your setup.

# Use the Index Status API (<http://localhost:9200/A/_status>) to inspect
# the index status.

# ---------------------------------- Various -----------------------------------

# Protect against accidental close/delete operations on all indices.
# This setting prevents deleting index with wildcards *.
# Still closing/deleting individual indices can be done with by providing
# the full name of the index.
#
action.destructive_requires_name: true
action.disable_close_all_indices: true
action.disable_delete_all_indices: true
action.disable_shutdown: true

